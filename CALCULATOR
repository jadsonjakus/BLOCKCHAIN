# Importar a biblioteca tkinter
import tkinter as tk

# Definir uma classe Calculator que representa a calculadora e suas funções
class Calculator:
    # O construtor da classe recebe o seguinte parâmetro:
    # - master: o widget pai da calculadora
    def __init__(self, master):
        # Atribuir o parâmetro ao atributo da classe
        self.master = master

        # Criar uma variável de string para armazenar a expressão matemática
        self.expression = tk.StringVar()

        # Criar uma caixa de texto para mostrar a expressão e o resultado usando a biblioteca tkinter
        self.entry = tk.Entry(master, textvariable=self.expression, justify="right")
        self.entry.grid(row=0, column=0, columnspan=4, sticky="nsew")

        # Criar os botões da calculadora usando a biblioteca tkinter
        self.button_0 = tk.Button(master, text="0", command=lambda: self.append("0"))
        self.button_1 = tk.Button(master, text="1", command=lambda: self.append("1"))
        self.button_2 = tk.Button(master, text="2", command=lambda: self.append("2"))
        self.button_3 = tk.Button(master, text="3", command=lambda: self.append("3"))
        self.button_4 = tk.Button(master, text="4", command=lambda: self.append("4"))
        self.button_5 = tk.Button(master, text="5", command=lambda: self.append("5"))
        self.button_6 = tk.Button(master, text="6", command=lambda: self.append("6"))
        self.button_7 = tk.Button(master, text="7", command=lambda: self.append("7"))
        self.button_8 = tk.Button(master, text="8", command=lambda: self.append("8"))
        self.button_9 = tk.Button(master, text="9", command=lambda: self.append("9"))
        self.button_dot = tk.Button(master, text=".", command=lambda: self.append("."))
        self.button_add = tk.Button(master, text="+", command=lambda: self.append("+"))
        self.button_sub = tk.Button(master, text="-", command=lambda: self.append("-"))
        self.button_mul = tk.Button(master, text="*", command=lambda: self.append("*"))
        self.button_div = tk.Button(master, text="/", command=lambda: self.append("/"))
        self.button_eq = tk.Button(master, text="=", command=self.evaluate)
        self.button_clr = tk.Button(master, text="C", command=self.clear)

        # Posicionar os botões na grade usando a biblioteca tkinter
        self.button_7.grid(row=1, column=0, sticky="nsew")
        self.button_8.grid(row=1, column=1, sticky="nsew")
        self.button_9.grid(row=1, column=2, sticky="nsew")
        self.button_add.grid(row=1, column=3, sticky="nsew")
        self.button_4.grid(row=2, column=0, sticky="nsew")
        self.button_5.grid(row=2, column=1, sticky="nsew")
        self.button_6.grid(row=2, column=2, sticky="nsew")
        self.button_sub.grid(row=2, column=3, sticky="nsew")
        self.button_1.grid(row=3, column=0, sticky="nsew")
        self.button_2.grid(row=3, column=1, sticky="nsew")
        self.button_3.grid(row=3, column=2, sticky="nsew")
        self.button_mul.grid(row=3, column=3, sticky="nsew")
        self.button_0.grid(row=4, column=0, sticky="nsew")
        self.button_dot.grid(row=4, column=1, sticky="nsew")
        self.button_eq.grid(row=4, column=2, sticky="nsew")
        self.button_div.grid(row=4, column=3, sticky="nsew")
        self.button_clr.grid(row=5, column=0, columnspan=4 ,sticky="nsew")

    # Definir uma função append que adiciona um caractere à expressão
    def append(self, char):
        # Obter o valor atual da expressão
        value = self.expression.get()
        # Adicionar o caractere ao final da expressão
        value += char
        # Atualizar o valor da expressão
        self.expression.set(value)

    # Definir uma função evaluate que avalia a expressão e mostra o resultado
    def evaluate(self):
        # Obter o valor atual da expressão
        value = self.expression.get()
        # Tentar avaliar a expressão usando a função eval
        try:
            # Avaliar a expressão e converter o resultado em uma string
            result = str(eval(value))
            # Atualizar o valor da expressão com o resultado
            self.expression.set(result)
        # Se ocorrer algum erro, mostrar uma mensagem de erro
        except Exception as e:
            # Mostrar a mensagem de erro na caixa de texto
            self.expression.set(f"Erro: {e}")

    # Definir uma função clear que limpa a expressão
    def clear(self):
        # Atualizar o valor da expressão com uma string vazia
        self.expression.set("")

# Criar uma janela principal usando a biblioteca tkinter
window = tk.Tk()
# Definir o título da janela
window.title("Calculadora")
# Definir o tamanho mínimo da janela
window.minsize(300, 300)
# Definir as cores dos botões usando um dicionário
colors = {"0": "light blue", "1": "light green", "2": "light yellow", "3": "light pink", "4": "light cyan", "5": "light coral", "6": "light gray", "7": "lavender", "8": "khaki", "9": "salmon", ".": "white", "+": "orange", "-": "red", "*": "purple", "/": "blue", "=": "green", "C": "black"}
# Para cada widget na janela, fazer o seguinte
for widget in window.winfo_children():
    # Se o widget for um botão, definir a sua cor de fundo de acordo com o seu texto usando o dicionário de cores
    if isinstance(widget, tk.Button):
        widget.config(bg=colors[widget["text"]])
# Criar uma instância da classe Calculator passando a janela como parâmetro
calculator = Calculator(window)
# Iniciar o loop principal da janela usando a biblioteca tkinter
window.mainloop()
